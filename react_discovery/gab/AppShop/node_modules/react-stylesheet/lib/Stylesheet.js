'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.override = exports.Stylesheet = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.classNameFor = classNameFor;
exports.activeVariantNames = activeVariantNames;
exports.default = stylesheet;

var _compiler = require('./compiler');

var _compiler2 = _interopRequireDefault(_compiler);

var _PseudoClassSet = require('./compiler/PseudoClassSet');

var _PseudoClassSet2 = _interopRequireDefault(_PseudoClassSet);

var _StylesheetManager2 = require('./StylesheetManager');

var _StyleRepresentation = require('./StyleRepresentation');

var _Environment = require('./Environment');

var Environment = _interopRequireWildcard(_Environment);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @copyright 2015-present Prometheus Research, LLC
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Stylesheet = exports.Stylesheet = function (_StylesheetManager) {
  _inherits(Stylesheet, _StylesheetManager);

  function Stylesheet(name, spec) {
    _classCallCheck(this, Stylesheet);

    var _this = _possibleConstructorReturn(this, (Stylesheet.__proto__ || Object.getPrototypeOf(Stylesheet)).call(this));

    _this.name = name;
    _this.spec = spec;
    _this._stylesheet = (0, _compiler2.default)(name, spec);
    _this._refs = 0;
    _this._remove = null;
    _this._disposeTimer = null;
    return _this;
  }

  _createClass(Stylesheet, [{
    key: 'inject',
    value: function inject() {
      this._refs = this._refs + 1;
      if (this._disposeTimer !== null) {
        clearTimeout(this._disposeTimer);
        this._disposeTimer = null;
      }
      if (this._remove === null) {
        this._remove = this.injectStylesheet([[this._stylesheet.id, this._stylesheet.css]]);
      }
      return this;
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this._refs = this._refs - 1;
      if (this._disposeTimer === null) {
        this._disposeTimer = setTimeout(this._disposePerform, 0);
      }
      return this;
    }
  }, {
    key: 'override',
    value: function override(spec, name) {
      if (name == null) {
        name = this.name;
      }
      return new Stylesheet(name, _override(this.spec, spec));
    }
  }, {
    key: 'toClassName',
    value: function toClassName() {
      var variant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var className = classNameFor(this._stylesheet.mapping, variant);
      if (Environment.isTest) {
        var activeNames = activeVariantNames(this._stylesheet.mapping, variant);
        var style = Object.assign({}, this.spec);
        for (var k in style) {
          if (activeNames.indexOf(k) === -1) {
            delete style[k];
          }
        }
        return new _StyleRepresentation.CSSClassRepresentation(className, style, 'CompiledCSSWithVariants');
      } else {
        return className;
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var Stylesheet = function Stylesheet(name, css) {
        _classCallCheck(this, Stylesheet);

        this.name = name;
        this.css = css;
      };

      return new Stylesheet(this.name, prettyFormatCSS(this._stylesheet.css));
    }
  }, {
    key: '_disposePerform',
    value: function _disposePerform() {
      if (this._remove && this._refs < 1) {
        this._remove();
        this._remove = null;
      }
    }
  }]);

  return Stylesheet;
}(_StylesheetManager2.StylesheetManager);

function prettyFormatCSS(css) {
  css = css.slice(css.indexOf('{') + 1);
  css = css.slice(0, css.indexOf('}'));
  css = css.trim();
  css = css.replace(/;/g, ';\n    ');
  css = '\n    ' + css;
  return css;
}

function classNameFor(mapping, variant) {
  var className = mapping.className != null ? mapping.className : '';
  for (var _variantName in variant) {
    if (mapping.then && variant.hasOwnProperty(_variantName) && variant[_variantName] && mapping.then[_variantName]) {
      className = className + ' ' + classNameFor(mapping.then[_variantName], variant);
    }
  }
  return className;
}

function activeVariantNames(mapping, variant) {
  var names = ['base'];
  for (var _variantName2 in variant) {
    if (mapping.then && variant.hasOwnProperty(_variantName2) && variant[_variantName2] && mapping.then[_variantName2]) {
      names = names.concat(_variantName2, activeVariantNames(mapping.then[_variantName2], variant));
    }
  }
  return names;
}

function _override(spec, override) {
  var result = Object.assign({}, spec);
  for (var k in override) {
    if (override.hasOwnProperty(k)) {
      result[k] = overrideCSSPropertySet(result[k], override[k]);
    }
  }
  return result;
}

exports.override = _override;
function overrideCSSPropertySet(propSet, override) {
  if (propSet == null) {
    return override;
  }
  var result = Object.assign({}, propSet);
  for (var k in override) {
    if (override.hasOwnProperty(k)) {
      if (_PseudoClassSet2.default.hasOwnProperty(k) && _PseudoClassSet2.default[k]) {
        result[k] = overrideCSSPropertySet(result[k], override[k]);
      } else {
        result[k] = override[k];
      }
    }
  }
  return result;
}

function stylesheet(name, spec) {
  return new Stylesheet(name, spec);
}
