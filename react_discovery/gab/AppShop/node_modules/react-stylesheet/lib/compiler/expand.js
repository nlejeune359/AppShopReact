'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * Copyright 2016-present, Prometheus Research, LLC. MIT License
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * 
                                                                                                                                                                                                                                                                               */

exports.default = expand;

var _UnitlessNumberPropSet = require('./UnitlessNumberPropSet');

var _UnitlessNumberPropSet2 = _interopRequireDefault(_UnitlessNumberPropSet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function expand(style) {
  var expandedStyle = {};
  for (var name in style) {
    if (!style.hasOwnProperty(name)) {
      continue;
    }
    Object.assign(expandedStyle, expandProp(name, style[name]));
  }
  return expandedStyle;
}

/**
 * Compile name: value property.
 */
function expandProp(name, value) {
  switch (name) {
    // extended variants

    case 'padding':
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value != null) {
        return compileLayoutSyntax('padding', value);
      } else {
        return expandSingleProp(name, value);
      }

    case 'margin':
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value != null) {
        return compileLayoutSyntax('margin', value);
      } else {
        return expandSingleProp(name, value);
      }

    case 'border':
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value != null) {
        return expandBorderSyntax('border', value);
      } else {
        return expandSingleProp(name, value);
      }

    case 'borderLeft':
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value != null) {
        return expandBorderSyntax('borderLeft', value);
      } else {
        return expandSingleProp(name, value);
      }

    case 'borderTop':
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value != null) {
        return expandBorderSyntax('borderTop', value);
      } else {
        return expandSingleProp(name, value);
      }

    case 'borderBottom':
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value != null) {
        return expandBorderSyntax('borderBottom', value);
      } else {
        return expandSingleProp(name, value);
      }

    case 'borderRight':
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value != null) {
        return expandBorderSyntax('borderRight', value);
      } else {
        return expandSingleProp(name, value);
      }

    case 'transition':
      return compileTransition(value);

    case 'outline':
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value != null) {
        return expandBorderSyntax('outline', value);
      } else {
        return expandSingleProp(name, value);
      }

    case 'boxShadow':
      return compileBoxShadow(value);

    case 'textShadow':
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value != null) {
        return compileTextShadowSyntax(value);
      } else {
        return expandSingleProp(name, value);
      }

    default:
      return expandSingleProp(name, value);
  }
}

function expandSingleProp(name, value) {
  return _defineProperty({}, name, Array.isArray(value) ? value : compileValue(name, value));
}

function expandBorderSyntax(name, value) {
  var _value$width = value.width;
  var width = _value$width === undefined ? 'medium' : _value$width;
  var _value$style = value.style;
  var style = _value$style === undefined ? 'none' : _value$style;
  var _value$color = value.color;
  var color = _value$color === undefined ? 'currentColor' : _value$color;

  return _defineProperty({}, name, compileValue('borderWidth', width) + ' ' + String(style) + ' ' + String(color));
}

function compileLayoutSyntax(name, value) {
  var _value$vertical = value.vertical;
  var vertical = _value$vertical === undefined ? 0 : _value$vertical;
  var _value$horizontal = value.horizontal;
  var horizontal = _value$horizontal === undefined ? 0 : _value$horizontal;
  var _value$top = value.top;
  var top = _value$top === undefined ? vertical : _value$top;
  var _value$right = value.right;
  var right = _value$right === undefined ? horizontal : _value$right;
  var _value$bottom = value.bottom;
  var bottom = _value$bottom === undefined ? vertical : _value$bottom;
  var _value$left = value.left;
  var left = _value$left === undefined ? horizontal : _value$left;

  return _defineProperty({}, name, compileValue('margin', top) + ' ' + compileValue('margin', right) + '  ' + compileValue('margin', bottom) + ' ' + compileValue('margin', left));
}

function compileBoxShadow(value) {
  return compileValueWith('boxShadow', value, compileBoxShadowValueSyntax);
}

function compileBoxShadowValueSyntax(value) {
  var _value$x = value.x;
  var x = _value$x === undefined ? 0 : _value$x;
  var _value$y = value.y;
  var y = _value$y === undefined ? 0 : _value$y;
  var _value$blur = value.blur;
  var blur = _value$blur === undefined ? 0 : _value$blur;
  var _value$spread = value.spread;
  var spread = _value$spread === undefined ? 0 : _value$spread;
  var _value$color2 = value.color;
  var color = _value$color2 === undefined ? '#000' : _value$color2;
  var _value$inset = value.inset;
  var inset = _value$inset === undefined ? false : _value$inset;

  var css = String(x) + 'px ' + String(y) + 'px ' + String(blur) + 'px ' + String(spread) + 'px ' + String(color);
  if (inset) {
    css = 'inset ' + css;
  }
  return css;
}

function compileTextShadowSyntax(value) {
  var _value$x2 = value.x;
  var x = _value$x2 === undefined ? 0 : _value$x2;
  var _value$y2 = value.y;
  var y = _value$y2 === undefined ? 0 : _value$y2;
  var _value$blur2 = value.blur;
  var blur = _value$blur2 === undefined ? 0 : _value$blur2;
  var _value$color3 = value.color;
  var color = _value$color3 === undefined ? '#000' : _value$color3;

  var css = String(x) + 'px ' + String(y) + 'px ' + String(blur) + 'px ' + String(color);
  return expandSingleProp('textShadow', css);
}

function compileTransition(value) {
  return compileValueWith('transition', value, compileTransitionValueSyntax);
}

function compileTransitionValueSyntax(value) {
  var _value$property = value.property;
  var property = _value$property === undefined ? 'all' : _value$property;
  var _value$duration = value.duration;
  var duration = _value$duration === undefined ? 0 : _value$duration;
  var _value$timingFunction = value.timingFunction;
  var timingFunction = _value$timingFunction === undefined ? 'ease' : _value$timingFunction;
  var _value$delay = value.delay;
  var delay = _value$delay === undefined ? 0 : _value$delay;

  return String(property) + ' ' + String(duration) + 's ' + String(timingFunction) + ' ' + String(delay) + 's';
}

function compileValueWith(name, value, compileValue) {
  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value != null) {
    var css = Array.isArray(value) ? value.map(function (value) {
      return typeof value === 'string' ? value : compileValue(value);
    }).join(', ') : compileValue(value);
    return expandSingleProp(name, css);
  } else {
    return expandSingleProp(name, value);
  }
}

/**
 * Compile style prop value.
 *
 * Based on code in React, see react/lib/dangerousStyleValue module.
 */
function compileValue(name, value) {
  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || _UnitlessNumberPropSet2.default.hasOwnProperty(name) && _UnitlessNumberPropSet2.default[name]) {
    return '' + value; // cast to string
  } else {
    return value + 'px';
  }
}
