'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.staticStylesheetManager = exports.dynamicStylesheetManager = exports.StaticStylesheetManager = exports.DynamicStylesheetManager = exports.StylesheetManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _addStyles = require('style-loader/addStyles');

var _addStyles2 = _interopRequireDefault(_addStyles);

var _murmurhash3_gc = require('murmurhash-js/murmurhash3_gc');

var _murmurhash3_gc2 = _interopRequireDefault(_murmurhash3_gc);

var _ElementPropSpec = require('./ElementPropSpec');

var _compiler = require('./compiler');

var _StyleRepresentation = require('./StyleRepresentation');

var _Environment = require('./Environment');

var Environment = _interopRequireWildcard(_Environment);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StylesheetManager = exports.StylesheetManager = function () {
  function StylesheetManager() {
    _classCallCheck(this, StylesheetManager);
  }

  _createClass(StylesheetManager, [{
    key: 'injectStylesheet',
    value: function injectStylesheet(compiledStylesheet) {
      if (Environment.canInject) {
        (0, _addStyles2.default)(compiledStylesheet);
      }
    }
  }]);

  return StylesheetManager;
}();

var DynamicStylesheetManager = exports.DynamicStylesheetManager = function (_StylesheetManager) {
  _inherits(DynamicStylesheetManager, _StylesheetManager);

  function DynamicStylesheetManager() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DynamicStylesheetManager);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DynamicStylesheetManager.__proto__ || Object.getPrototypeOf(DynamicStylesheetManager)).call.apply(_ref, [this].concat(args))), _this), _this._stylesheetCache = new Map(), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DynamicStylesheetManager, [{
    key: 'toClassName',
    value: function toClassName(key, style) {
      key = 'rs-' + String((0, _murmurhash3_gc2.default)(String(key)));
      var className = this._stylesheetCache.get(key);
      if (className == null) {
        var css = (0, _compiler.compileStyle)(key, style, true);
        if (Environment.isTest) {
          className = new _StyleRepresentation.CSSClassRepresentation(key, style, 'DynamicallyGeneratedCSS');
        } else {
          className = key;
        }
        this.injectStylesheet([[key, css]]);
        this._stylesheetCache.set(key, className);
      }
      return className;
    }
  }]);

  return DynamicStylesheetManager;
}(StylesheetManager);

var StaticStylesheetManager = exports.StaticStylesheetManager = function (_StylesheetManager2) {
  _inherits(StaticStylesheetManager, _StylesheetManager2);

  function StaticStylesheetManager() {
    _classCallCheck(this, StaticStylesheetManager);

    var _this2 = _possibleConstructorReturn(this, (StaticStylesheetManager.__proto__ || Object.getPrototypeOf(StaticStylesheetManager)).call(this));

    _this2._precompile();
    return _this2;
  }

  _createClass(StaticStylesheetManager, [{
    key: 'toClassName',
    value: function toClassName(state, name, value) {
      var className = 'rs-' + name + '-' + value + '-' + state;
      if (Environment.isTest) {
        return new _StyleRepresentation.CSSClassRepresentation(className, _defineProperty({}, name, value), 'PrecompiledCSS');
      } else {
        return className;
      }
    }
  }, {
    key: '_precompile',
    value: function _precompile() {
      var cssList = [];
      for (var k in _ElementPropSpec.Spec) {
        if (!_ElementPropSpec.Spec.hasOwnProperty(k)) {
          continue;
        }
        var spec = _ElementPropSpec.Spec[k];
        if (spec.applyStrategy === 'static') {
          this._generateRuleSet(cssList, spec.name, spec.state, spec.valueSet);
        }
      }
      this.injectStylesheet([['static', cssList.join('\n')]]);
    }
  }, {
    key: '_generateRuleSet',
    value: function _generateRuleSet(cssList, name, state, valueSet) {
      for (var i = 0; i < valueSet.length; i++) {
        var value = valueSet[i];
        var className = 'rs-' + name + '-' + value + '-' + state;
        var important = true;
        cssList.push((0, _compiler.compileStyle)(className, state === 'normal' ? _defineProperty({}, name, value) : _defineProperty({}, state, _defineProperty({}, name, value)), important));
      }
    }
  }]);

  return StaticStylesheetManager;
}(StylesheetManager);

var dynamicStylesheetManager = exports.dynamicStylesheetManager = new DynamicStylesheetManager();
var staticStylesheetManager = exports.staticStylesheetManager = new StaticStylesheetManager();
